<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://superflows.dev/blog</id>
    <title>Superflows Blog</title>
    <updated>2022-09-30T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://superflows.dev/blog"/>
    <subtitle>Superflows Blog</subtitle>
    <icon>https://superflows.dev/img/superflows_gray_transparent_200.png</icon>
    <entry>
        <title type="html"><![CDATA[Follow These 2 Rules To Build Long Lasting Cloud Softwares]]></title>
        <id>build-long-lasting-software</id>
        <link href="https://superflows.dev/blog/build-long-lasting-software"/>
        <updated>2022-09-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The secret sauce to building long lasting software is just two rules — keep the tech stack simple and insist on 100 percent code coverage in unit tests, as the software journeys ahead.]]></summary>
        <content type="html"><![CDATA[<img loading="lazy" src="https://miro.medium.com/max/1400/1*HV4MQcR7c-9Dzt0yZe9crQ.png" height="500" width="500" class="img_ev3q"><p>Software development has transformed massively in the last decade. We have tons of tools now, which we didn’t have before. Methods have also evolved, things like CI / CD have changed the way we think about software development. There are even things like low-code or no-code systems, which have simplified software development.</p><p>But the holy grail of software engineering has still remained building long-lasting software and that is still insanely difficult!</p><a href="https://medium.com/@superflowsapp3/2-rules-to-follow-for-building-long-lasting-cloud-software-41d8f2cc8c91" target="_blank" rel="noopener noreferrer">Read The Entire Article</a>]]></content>
        <author>
            <name>Hrushi M</name>
            <uri>https://github.com/superflows-dev</uri>
        </author>
        <category label="software engineering" term="software engineering"/>
        <category label="startups" term="startups"/>
        <category label="cicd" term="cicd"/>
        <category label="automation testing" term="automation testing"/>
        <category label="simplicity" term="simplicity"/>
        <category label="software development" term="software development"/>
        <category label="cloud" term="cloud"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Insider’s edge - Fast, Free & No Sign-In Keyword Research Techniques for SEO in 2022]]></title>
        <id>seo-keyword-research</id>
        <link href="https://superflows.dev/blog/seo-keyword-research"/>
        <updated>2022-09-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Planning to launch a new website? A new blog? Sounds like a good idea but do you really know what you should think about first? No, not the website design, not the website look & feel and colour scheme, not your logo and branding, not even the content. The first thing you should be clear about, is the SEO, i.e. Search Engine Optimization.]]></summary>
        <content type="html"><![CDATA[<img loading="lazy" src="https://miro.medium.com/max/1400/0*7wASiE6AfOfcLZ0_" height="500" width="500" class="img_ev3q"><p>Planning to launch a new website? A new blog? Sounds like a good idea but do you really know what you should think about first? No, not the website design, not the website look &amp; feel and colour scheme, not your logo and branding, not even the content. The first thing you should be clear about, is the SEO, i.e. Search Engine Optimization.</p><p>I know it is counter-intuitive. Also trust me when I say that I was definitely not intending to create a dramatic beginning. Neither was I trying to bait you into reading this entire article. I was just stating facts. I was, in other words, saying that SEO trumps everything.</p><a href="https://medium.com/@superflowsapp3/insiders-edge-fast-free-no-sign-in-keyword-research-techniques-for-seo-in-2022-f3c2980dd6e3" target="_blank" rel="noopener noreferrer">Read The Entire Article</a>]]></content>
        <author>
            <name>Hrushi M</name>
            <uri>https://github.com/superflows-dev</uri>
        </author>
        <category label="marketing" term="marketing"/>
        <category label="seo" term="seo"/>
        <category label="search engine optimization" term="search engine optimization"/>
        <category label="keywords" term="keywords"/>
        <category label="google search" term="google search"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[A definitive way to minimize technical debt]]></title>
        <id>definitive-way-to-minimize-technical-debt</id>
        <link href="https://superflows.dev/blog/definitive-way-to-minimize-technical-debt"/>
        <updated>2022-09-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Accumulated technical debt is one of the major reasons why softwares perform badly over time. To build, deliver and maintain long lasting softwares, a testing driven development approach is highly recommended!]]></summary>
        <content type="html"><![CDATA[<img loading="lazy" src="https://miro.medium.com/max/1400/1*RaBco20bdZreKGXTVHsHSw.jpeg" height="500" width="500" class="img_ev3q"><p>In the lifecycle of any software, change is often costlier than anticipated. Because more often than not, it accumulates technical debt. When you buy something from somebody and don’t pay them back, you are in debt. Essentially, when you owe something to somebody, you are in their debt. As long as you are capable of paying them back in the near future, the debt is considered manageable. But if the accumulated debt exceeds your paying capacity, the debt becomes unmanageable.</p><a href="https://medium.com/@superflowsapp3/a-definitive-way-to-minimize-technical-debt-4388f26b510" target="_blank" rel="noopener noreferrer">Read The Entire Article</a>]]></content>
        <author>
            <name>Hrushi M</name>
            <uri>https://github.com/superflows-dev</uri>
        </author>
        <category label="cicd" term="cicd"/>
        <category label="test driven development" term="test driven development"/>
        <category label="technical debt" term="technical debt"/>
        <category label="software engineering" term="software engineering"/>
        <category label="software architecture" term="software architecture"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Thing that differentiates Engineers from the rest]]></title>
        <id>what-differentiates-engineers</id>
        <link href="https://superflows.dev/blog/what-differentiates-engineers"/>
        <updated>2022-09-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The Thing that differentiates Engineers from the rest]]></summary>
        <content type="html"><![CDATA[<img loading="lazy" src="https://miro.medium.com/max/1400/1*sxRPEkrLDl1n0OMiP4b-UA.jpeg" height="500" width="500" class="img_ev3q"><p>Have you ever wondered why in this era of automation and mechanisation, engineers still get to retain their jobs? Many job profiles have come and gone away. But even with so many advances in technologies across industries and the emergence of artificial intelligence and machine learning, why haven’t engineers been replaced yet?</p><p>The answer is quite simple, really. But before that, let us talk theatre! I am sure you have had the pleasure of watching a nice play or two so far in your life. Don’t say you haven’t, because OMG then you have definitely missed a thing! Moving on, by any teeny tiny chance, have you ever had the good fortune of watching two performances of the same amazing play twice? Yes? Then what was the one thing that struck you? I’ll tell you what struck me the most. I once saw two back to back performances of a play within a span of hours. The day, the cast and the venue was the same. The only variable was the audience. What struck me most, was that both the performances or if I may call them renditions, felt so different! The scenes were same, characters were the same, dialogues didn’t change at all, still, I experienced the difference. If you allow me some liberty to get a little philosophical, I would say, such is life! Right? If somebody asks me to describe life, I’d say life is not like a movie, new and different is every single day, just like every different performance of a play!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bringing-order-to-chaos">Bringing order to chaos!<a class="hash-link" href="#bringing-order-to-chaos" title="Direct link to heading">​</a></h2><p>Looping back to the current topic of deliberation, every engineering project is essentially a fresh endeavour. No matter how many similar projects you may have done in the past, the next project will always throw something unexpected at you. If you are into construction, no matter how many buildings you build, how many bridges you construct, the next project will still be a challenge! Because something or the other will change, maybe the soil conditions, maybe the water table, maybe the wind conditions, maybe availability of material; something will change that will catch you off-guard. If you are a software engineer and are tasked to develop an e-commerce application, no matter how many e-commerce apps you’ve successfully developed in the past, this one is going to be different! The products being sold may be different, the user profiles of customers may be different, the tech-stack or the deployment environment may vary.</p><p>Life is chaotic and dynamic. With knowledge, training and experience, engineers are the ones, who can bring some order to this chaos. No matter how much progress we achieve in life, the chaos will remain and we will keep needing the skilled folk who’ll manage it, with methods, systems and innovations. We’ll keep needing engineering minds!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="knowing-which-problems-to-solve-first">Knowing which problems to solve first<a class="hash-link" href="#knowing-which-problems-to-solve-first" title="Direct link to heading">​</a></h2><p>Every big endeavour begins with one or more problems that need to be solved. When the daring Sheikh from UAE challenged his team to build the greatest hotel ever built, the first problem they had to solve was creating an artificial island that would withstand the tremendous pressure from the sea waves and at the same time serve as the foundation of a 300 meter tall structure. Then there was also this not so little problem about the wind. The shape of this structure was that of a sail; just imagine the amount of wind a 300 meter tall sail would have to withstand! Needless to say, with such a humungous ask at hand, the team had to start somewhere. The engineers began their work. First they figured out how to build the island that met the brief. They created a rock-bed and then topped it up with a mesh of perforated concrete blocks. This artificial sponge prevented flooding and absorbed the pressure of waves. Then they addressed the problem of the structure stability. This hotel in Dubai, called Burj al Arab, is usually known for its opulence and luxury, but in actuality, is an engineering feat!</p><p>Another lesser known example comes from India, where the Government wished to build a 750 Km long railway line covering the Western coast of India. The problem was that the entire coastal strip was a mountainous region with lots or rivers, ravines and valleys sprinkled in between. If this wasn’t enough, the region was also prone to landslides, especially during the monsoon season. Moreover, the track had to be near flat and a minimum radial curvature of 1.25 Km had to be maintained to enable faster train speeds. After commissioning, the engineers began their work and completed it in record time! They ended up creating one of the most scenic train routes in the world comprising of 2000 plus bridges and 91 tunnels! It included the longest railway tunnel in Asia.</p><p>Examples are aplenty. Truth be told, in reality, very few problems get “absolutely” solved. You don’t always need an absolute solution, you need a realistic or a workable solution to get the job done. Engineers are the ones who have an eye for the right approximations and the know-how to achieve the required trade-offs!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="seeing-things-differently">Seeing things differently<a class="hash-link" href="#seeing-things-differently" title="Direct link to heading">​</a></h2><p>A problem, which is complex from one perspective, suddenly appears to be simple from another perspective, and then the world is disrupted. In the early days of the Internet, ranking the results of search engines was a complex problem, which nobody really had the solution to. Two engineers from Stanford University, simply saw this problem from a different perspective and then an elegant solution unraveled, known as PageRank. They figured that simply the number of backlinks to a webpage was a good enough approximation of its popularity. This became the basis of the Google search algorithm and we all know, the world has never been the same since.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-thing">The thing<a class="hash-link" href="#the-thing" title="Direct link to heading">​</a></h2><p>The ability to bring predictability in chaos, the skill of conjuring up practical solutions to seemingly impossible challenges and the knack of seeing things differently, have made engineers invaluable since time immemorial. The contribution of the engineering profession to humankind is unparalleled and yes that is exactly what differentiates engineers from the rest! Do you agree?</p>]]></content>
        <author>
            <name>Hrushi M</name>
            <uri>https://github.com/superflows-dev</uri>
        </author>
        <category label="engineers" term="engineers"/>
        <category label="engineering" term="engineering"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[CI/CD pipeline for an NPM package, is it a good idea?]]></title>
        <id>cicd-pipeline-for-npm-good-idea</id>
        <link href="https://superflows.dev/blog/cicd-pipeline-for-npm-good-idea"/>
        <updated>2022-08-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[CI/CD pipeline for an NPM package, is it a good idea?]]></summary>
        <content type="html"><![CDATA[<img loading="lazy" src="https://miro.medium.com/max/1400/1*Ymn4qf1YoRdpTQDkeypaWQ.png" height="500" width="500" class="img_ev3q"><p>Rather than bigger and spaced out software releases, companies have lately gotten better results with quicker incremental software releases. Shorter release cycles help get user feedback earlier. Effects of bugs &amp; erroneous decisions also stay contained. In short, good features get milked faster and the damage from bad things gets rectified sooner. Overall, resulting in better software delivery. CI / CD, or the continuous integration / continuous deployment, takes this approach to its extreme.</p><p>This article discusses the possibility of using the CI / CD pipeline to develop NPM packages. There isn’t a generic YES / NO answer to this question. The answer varies case to case. However, it is important to understand what goes in making this decision, such as the various factors and trade-offs involved.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-ci--cd">What is CI / CD?<a class="hash-link" href="#what-is-ci--cd" title="Direct link to heading">​</a></h2><p>CI / CD takes the agile software methodology to its extreme. Agile enabled us to release weekly, bi-weekly or monthly. With CI / CD, we can now have daily software releases.</p><p>The base of CI / CD, is automation. In a typical CI / CD project — (1) before writing new code, the developer ensures that all the prior code is covered under automated unit tests, (2) tester relies on automated integration tests and (3) the devops engineer automates the deployment mechanism.</p><p>(1) and (2) ensures that the newly code written has no unintended consequences. (3) eliminates manual deployment errors, enables canary releases and graceful rollbacks.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="advantages-of-ci--cd">Advantages of CI / CD<a class="hash-link" href="#advantages-of-ci--cd" title="Direct link to heading">​</a></h2><p><strong>Faster User Feedback</strong> — CI / CD release cycles are extremely short, hence user feedback is received earlier.</p><p><strong>Lesser &amp; Isolated Errors</strong> — Because of automation in testing and deployment, possibility of errors reduces. Faults, if any, can be quickly isolated and resolved.</p><p><strong>Quality delivery</strong> — CI / CD brings control, efficiency, transparency and accountability to software development, ultimately resulting in a good quality delivery.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="disadvantages-of-ci--cd">Disadvantages of CI / CD<a class="hash-link" href="#disadvantages-of-ci--cd" title="Direct link to heading">​</a></h2><p><strong>Increased Complexity</strong> — CI / CD is automation-driven, hence requires highly skilled resources and sophisticated instrumentation. In a project that is based on multiple tech-stacks, things can get complicated quickly.</p><p><strong>Operational Difficulties With Larger Teams</strong> — CI / CD works well with smaller teams (less than 10 people). For larger projects with larger teams, work needs to be efficiently broken down and handed over to smaller teams for execution. This presents operational difficulties.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ci--cd-pipeline-for-an-npm-package">CI / CD pipeline for an NPM package<a class="hash-link" href="#ci--cd-pipeline-for-an-npm-package" title="Direct link to heading">​</a></h2><p>Let us take an example of a React package, called <a href="https://www.npmjs.com/package/react-upload-to-s3" target="_blank" rel="noopener noreferrer">react-upload-to-s3</a>. It is an all-in-one react-only component for uploading images, documents and videos to AWS S3.</p><p>CI / CD pipeline for such a project would look like the following</p><img loading="lazy" src="https://miro.medium.com/max/1400/1*3myMwrIUmmOr9yGh-aqPww.png" height="500" width="500" class="img_ev3q"><h2 class="anchor anchorWithStickyNavbar_LWe7" id="factors--trade-offs">Factors &amp; trade-offs<a class="hash-link" href="#factors--trade-offs" title="Direct link to heading">​</a></h2><p>There are several factors, which need to be considered to decide whether CI / CD is the right approach for your npm project.</p><p><strong>New project or on-going project?</strong> — If your project is an on-going project, then setting up CI / CD is going to be a relatively difficult task. It is not impossible, but the migration from a traditional deployment pipeline to a CI / CD pipeline, will be slow and your interim costs would be higher. If you are starting from scratch on a new project, then you can definitely go for a CI / CD approach!</p><p><strong>Resourcing</strong> — CI / CD requires highly skilled developers, testers and devops engineers. Do you have such people on your team? Your developers should be able to write unit tests, ideally covering 100 percent of the code. Your testers should be experienced in writing automated tests for integration and regression. Your devops team should be able to automate the deployment process under varying load conditions, for varying scalability requirements and against different business scenarios &amp; asks. If you have such a team, then go for it! If you don’t, first build this capability by getting such people on-board, and then considering CI / CD.</p><p><strong>Size of the project</strong> — How big is your project? In terms on resourcing, how many developers and engineers would you need to complete the project? It is observed that CI / CD gives good results with smaller teams. Typically less than ten people per team is perfect for CI / CD. Is your team size going to be bigger than this? If yes, you’ll have to break down the work in smaller sized teams. But mind you, breaking down would then further give rise to operational difficulties. What could they be? Do you have a grasp? How do you plan to iron them out? You will need to thoroughly answer these questions before deciding to take the CI / CD approach with larger projects. For smaller project, CI / CD is a no brainer.</p><p><strong>Software architecture</strong> — Automation testing is the foundational principle of the CI / CD approach. Is your code testable? Is the separation of concerns done properly? Do the unit tests cover almost 100 percent of the code? How have you architected the client and the services? Are the interfaces clearly defined and documented? Do you have a test suite ready for the backend services as well?</p><p>There are many other factors as well, but most of them are the derivatives of these afore-mentioned important factors.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>If you are starting off a new project with a skilled team of 10 people or lesser, then CI / CD is a no brainer for you. Just got for it! Not only will it improve your software delivery, it will also help you optimize costs long term! In all other cases, understand the above decision making factors from the context of your project requirements and make an informed judgement.</p>]]></content>
        <author>
            <name>Hrushi M</name>
            <uri>https://github.com/superflows-dev</uri>
        </author>
        <category label="cicd" term="cicd"/>
        <category label="continuous integration" term="continuous integration"/>
        <category label="continuous delivery" term="continuous delivery"/>
        <category label="software development" term="software development"/>
        <category label="cloud" term="cloud"/>
        <category label="npm" term="npm"/>
        <category label="github" term="github"/>
    </entry>
</feed>